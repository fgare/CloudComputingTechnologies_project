services:
  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: federico
      MONGO_INITDB_ROOT_PASSWORD: m0ng0
      MONGO_INITDB_DATABASE: cct
    volumes:
      - .\persistentData\mongodb\mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
    networks:
      - can
    healthcheck:
      test: ["CMD","mongosh","--eval","db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis/redis-stack:latest
    command: redis-server --include /usr/local/etc/redis/redis.conf
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
      - "8001:8001"
    volumes:
    - .\persistentData\redis\redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - can
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  minio:
    image: quay.io/minio/minio:latest
    container_name: minio
    restart: always
    ports:
      # - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: federico
      MINIO_ROOT_PASSWORD: federico
  #  volumes:
  #    - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - can
    healthcheck:
      test: ["CMD","curl","-I","https://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    
  decoding:
    image: decoding:6
    container_name: decoding
    restart: always
    depends_on:
      - redis
      - mongodb
    # ports:
    #   - 5000:5000
    networks:
      - can
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  storeroom:
    image: storeroom:5
    container_name: storeroom
    restart: always
    networks:
      - can
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# volumes:
#   mongodb_data:
#   minio_data:

networks:
  can:
    driver: bridge
